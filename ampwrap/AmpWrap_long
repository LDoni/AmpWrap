#!/usr/bin/env python3

import argparse
import glob
import os
import sys
import yaml
import subprocess
import re




def print_banner():
    banner = """

 █████╗ ███╗   ███╗██████╗                                                                  ██╗
██╔══██╗████╗ ████║██╔══██╗                                                                 ╚██╗
███████║██╔████╔██║██████╔╝█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗╚██╗
██╔══██║██║╚██╔╝██║██╔═══╝ ╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝██╔╝
██║  ██║██║ ╚═╝ ██║██║                                                                      ██╔╝
╚═╝  ╚═╝╚═╝     ╚═╝╚═╝                                                                      ╚═╝

  ██╗                                                           ██╗    ██╗██████╗  █████╗ ██████╗
 ██╔╝                                                           ██║    ██║██╔══██╗██╔══██╗██╔══██╗
██╔╝█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗█████╗██║ █╗ ██║██████╔╝███████║██████╔╝
╚██╗╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝╚════╝██║███╗██║██╔══██╗██╔══██║██╔═══╝
 ╚██╗                                                           ╚███╔███╔╝██║  ██║██║  ██║██║
  ╚═╝                                                            ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝




"""
    print(banner)

    print(f"Welcome to ampwrap_long")








def write_config_yaml(input_dir, output_dir, db_choice, extension, sample_names, trimming, threads, nl_min_len, nl_max_len, nl_min_qual, emu_min_ab, forward_primer, reverse_primer, chimera):
    config = {
        "input_dir": input_dir,
        "output_dir": output_dir,
        "tax_db": db_choice,
        "script": "script",
        "logs": "logs",
        "file_extension": extension,
        "sample_names": sample_names,
        "threads": threads,
        "nl_min_len": nl_min_len,
        "nl_max_len": nl_max_len,
        "nl_min_qual": nl_min_qual,
        "emu_min_ab": emu_min_ab,
        "forward_primer": forward_primer,
        "reverse_primer": reverse_primer,
        #"disable_discard_untrimmed": disable_discard_untrimmed
    }

    if trimming != None: config["trimming_method"] = trimming
    if chimera : config["chimera"] = True

    config_path = os.path.join(output_dir, "config.yaml")
    with open(config_path, "w") as f:
        yaml.dump(config, f)
    return config_path


def run_snakemake(config_path, is_quiet=False):
    import os
    import subprocess
    import sys

    conda_bin_dir = os.path.join(os.environ['CONDA_PREFIX'], 'bin')
    snakefile_path = os.path.join(conda_bin_dir, 'snakefile.long')
    print(f"Searching Snakefile in: {snakefile_path}")
    if not os.path.exists(snakefile_path):
        print(f"ERROR: snakefile.long not found in {conda_bin_dir}")
        print("Check the paths:")
        print(f"  ls {conda_bin_dir} | grep snakefile.long")
        sys.exit(1)

    args = [
        "snakemake",
        "--configfile", config_path,
        "--cores", "all",
        "--nolock",
        "--snakefile", snakefile_path
    ]

    if is_quiet:
        args += ["--quiet", "all"]

    print("Let's Go:", " ".join(args))

    try:
        subprocess.run(args, check=True)
    except subprocess.CalledProcessError as e:
        print(f"ERROR in Snakemake: {e}")
        sys.exit(1)

def print_db_info():
    dbs = [
        {"name": "RDP v11.5", "file": "rdp.tar", "md5": "5aebf4f791d32950bfa07e5e0e7ea22a"},
        {"name": "SILVA v138.1", "file": "silva.tar", "md5": "4195810ceec63ed13b9ee3f9c678c52b"},
        {"name": "EMU v3.0", "file": "emu.tar", "md5": "707f235f515c0dc2e8d74278294241e7"}
    ]
    print("Database Name\tFile Name\tMD5")
    for db in dbs:
        print(f"{db['name']}\t{db['file']}\t{db['md5']}")











def main():
    print_banner()

    parser = argparse.ArgumentParser(description="Process raw sequencing files for downstream analysis.")
    parser.add_argument("-i", "--input-directory",  help="Specify the input directory containing raw fq/fq.gz/fastq/fastq.gz files")
    parser.add_argument("-o", "--output-directory", default=os.path.join(os.getcwd(), "ampwrap_long"), help="Specify the output directory (default: ./ampwrap_long_results)")
    parser.add_argument("-tr", "--trimming", choices=["porechop", "porechop_abi"], default=None, required=False, help="Specify the method if you want to remove adapters")
    parser.add_argument("-d", "--db-choice", choices=["rdp", "silva","emu"], default="emu", required=False, help="Specify the database choice for taxonomy assignment for EMU: silva, rdp or emu_db (default: emu)")
    parser.add_argument("-q", "--quiet",action="store_true", help="Minimal standard output")
    parser.add_argument("-t", "--threads", default=os.cpu_count(), help="Number of threads")
    parser.add_argument("--nl-min-len",help="Filter amplicons on a minimum read length. Default=1200", type=int, default=1200)
    parser.add_argument("--nl-max-len",help="Filter amplicons on a maximum read length. Default=1800", type=int, default=1800)
    parser.add_argument("--nl-min-qual",help="Filter on a minimum average read quality score. Default=10", type=int, default=10)
    parser.add_argument("--emu-min-ab",help="Filter species with relative abundance below threshold; .01 = 1 percent. Default=0.0001", type=float, default=0.0001)
    parser.add_argument("--cutadapt-forward",help="Forward primer sequence to trim it with cutadapt")
    parser.add_argument("--cutadapt-reverse",help="Reverse primer sequence to trim it with cutadapt")
    #parser.add_argument("--cutadapt-disable-discard-untrimmed",help="Deactivate cutadapt option --discard-untrimmed",actions="store_true",default=False)
    parser.add_argument("--db-info",action="store_true", help="Print available databases with version and checksum info")
    parser.add_argument("-c", "--chimera", action="store_true", help="Specify chimera flag if you want to remove chimeras")
    try: args = parser.parse_args()
    except SystemExit:
        #parser.print_usage()
        sys.exit(0)

    if args.db_info:
        print_db_info()
        sys.exit(0)

    input_dir = args.input_directory
    output_dir = args.output_directory
    nl_min_len = args.nl_min_len
    nl_max_len = args.nl_max_len
    nl_min_qual = args.nl_min_qual
    emu_min_ab = args.emu_min_ab
    is_quiet = args.quiet
    reverse_primer = args.cutadapt_reverse
    forward_primer = args.cutadapt_forward
    #disable_discard_untrimmed = args.cutadapt_disable_discard_untrimmed



    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)





    file_patterns = ["*.fq", "*.fq.gz", "*.fastq", "*.fastq.gz"]
    files = []
    matched_patterns = []


    for pattern in file_patterns:
        matched_files = glob.glob(os.path.join(input_dir, pattern))
        if matched_files:
            files.extend(matched_files)
            matched_patterns.extend([pattern] * len(matched_files))


    if not files:
        print("No matching files found in the input directory.")
        sys.exit(1)



    extension = matched_patterns[0].split('.')[-1]

    sample_names = [os.path.splitext(os.path.basename(file))[0] for file in files]









    config_path = write_config_yaml(
        input_dir, output_dir,  args.db_choice, extension, sample_names, args.trimming,  args.threads, nl_min_len, nl_max_len, nl_min_qual, emu_min_ab, reverse_primer, forward_primer, args.chimera
    )
    run_snakemake(config_path)

if __name__ == "__main__":
    main()
