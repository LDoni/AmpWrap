#!/usr/bin/env python3

import argparse
import glob
import os
import sys
import yaml
import subprocess
import re


def print_banner():
    banner = """


   █████╗ ███╗   ███╗██████╗                        ██╗   
  ██╔══██╗████╗ ████║██╔══██╗                       ╚██╗  
  ███████║██╔████╔██║██████╔╝█████╗█████╗█████╗█████╗╚██╗ 
  ██╔══██║██║╚██╔╝██║██╔═══╝ ╚════╝╚════╝╚════╝╚════╝██╔╝ 
  ██║  ██║██║ ╚═╝ ██║██║                            ██╔╝  
  ╚═╝  ╚═╝╚═╝     ╚═╝╚═╝                            ╚═╝   
    ██╗                 ██╗    ██╗██████╗  █████╗ ██████╗ 
   ██╔╝                 ██║    ██║██╔══██╗██╔══██╗██╔══██╗
  ██╔╝█████╗█████╗█████╗██║ █╗ ██║██████╔╝███████║██████╔╝
  ╚██╗╚════╝╚════╝╚════╝██║███╗██║██╔══██╗██╔══██║██╔═══╝ 
   ╚██╗                 ╚███╔███╔╝██║  ██║██║  ██║██║     
    ╚═╝                  ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     
                                                          


"""
    print(banner)

    print(f"Welcome to AMP WRAP")




def FVieiraStandard(file_):
    fileName = os.path.basename(file_)
    basename = fileName.split(".")[0]
    try:
        sample, direction = basename.split("_")
        direction = direction.replace("R", "").replace("r", "")
        direction = int(direction)
    except ValueError:
        raise ValueError(
            f"{fileName} does not appear to be a valid file for this standard. Please check file naming convention."
        )
    return file_, fileName, sample, direction

def IlluminaStandard(file_):
    fileName = os.path.basename(file_)
    try:
        baseName = fileName.split(".")[0]
        baseSplit = baseName.split("_")
        group = "_".join(baseSplit[:-4])
        sample = baseSplit[-5]
        direction = int(baseSplit[-2].replace("R", ""))
    except (ValueError, IndexError):
        raise ValueError(
            f"{fileName} does not appear to be a valid Illumina file name. Please check file naming convention."
        )
    return file_, fileName, sample, direction

def write_config_yaml(input_dir, output_dir, forward_primer, reverse_primer, amplen, db_choice, metainfo, extension, figaro_name):
    config = {
        "input_dir": input_dir,
        "output_dir": output_dir,
        "forward_primer": forward_primer,
        "reverse_primer": reverse_primer,
        "amplicon_length": amplen,
        "assign_taxonomy_method": db_choice,
        "sample_tab": os.path.join(output_dir, "sample.tab"),
        "read": [1, 2],
        "sample": [f[1].split(".")[0] for f in metainfo],
        "out_name": "SILVA_SSU_r138_2019.RData",
        "script": "script",
        "logs": "logs",
	"file_extension": extension,
        "figaro_name": figaro_name
    }

    config_path = os.path.join(output_dir, "config.yaml")
    with open(config_path, "w") as f:
        yaml.dump(config, f)
    #print(f"Config file written to {config_path}")
    return config_path

def run_snakemake(config_path,is_quiet=False):
    args = ["snakemake", "--configfile", config_path, "--cores", "all", "--nolock"]
    if is_quiet: args += ["--quiet", "all"]
    try:
        subprocess.run(args, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running Snakemake with config file '{config_path}': {e}")
        sys.exit(1)
def main():
    print_banner()
    
    parser = argparse.ArgumentParser(description="Process raw sequencing files for downstream analysis.")
    parser.add_argument("-i", "--input_directory", required=True, help="Specify the input directory containing raw fq/fq.gz/fastq/fastq.gz files")
    parser.add_argument("-a", "--forward_primer", required=True, help="Specify the forward primer sequence")
    parser.add_argument("-A", "--reverse_primer", required=True, help="Specify the reverse primer sequence")
    parser.add_argument("-o", "--output_directory", default=os.path.join(os.getcwd(), "dadaWRAP"), help="Specify the output directory (default: ./dadaWRAP)")
    parser.add_argument("-l", "--amplen", type=int, help="Specify the length of the amplified sequence target (e.g., R926 - F515 = 411pb - pF19 - pR20 = 372)")
    parser.add_argument(
    "-d", "--db_choice",
    choices=[
        "decipher_silva138",
        "dada2_silva_genus138",
        "dada2_RDP_genus19",
        "dada2_GG2_genus09"],
    default="decipher_silva138",
    required=False,
    help=(
        "Specify the database choice for taxonomy assignment: "
        "'decipher_silva138' (DECIPHER with SILVA 138), "
        "'dada2_silva_genus138' (DADA2 with SILVA 138, genus level), "
        "'dada2_RDP_genus19' (DADA2 with RDP, genus level), "
        "'dada2_GG2_genus09' (DADA2 with GreenGenes 09, genus level). "
        "Default: 'decipher_silva138'."))   
    parser.add_argument("-q", "--quiet",action="store_true", help="Minimal standard output")
    try: args = parser.parse_args()
    except SystemExit:
        #parser.print_usage()
        sys.exit(0)

    input_dir = args.input_directory
    output_dir = args.output_directory
    is_quiet = args.quiet

    # Create output directory if it doesn't exist
    os.makedirs(output_dir, exist_ok=True)

    file_patterns = ["*.fq", "*.fq.gz", "*.fastq", "*.fastq.gz"]
    files = [
        file
        for pattern in file_patterns
        for file in glob.glob(os.path.join(input_dir, pattern))
        #if "_R1" in file or "_R2" in file
	if re.search(r"_[Rr][12](?:_|\.)", file)
    ]

    if not files:
        print("No matching files found in the input directory.")
        sys.exit(1)

    extension = '.'.join(os.path.basename(files[0]).split('.')[1:])

###aggiungere variabile per figaroooooo
    figaro_name = None
    metainfo = []
    for fxn in (IlluminaStandard, FVieiraStandard):
        try:
            metainfo = [fxn(f) for f in files]
        except ValueError:
            continue
        else:
            break

    if not metainfo:
        print("Files do not respect any naming convention! Change the file names and retry.")
        sys.exit(1)

    sample_tab_path = os.path.join(output_dir, "sample.tab")

    with open(sample_tab_path, "w") as sf:
        for t in metainfo:
            file_path, fileName, sample, direction = t
            file_path = os.path.abspath(file_path)
            figaro_name = fxn.__name__
            sf.write(f"{sample} {direction} {file_path} {fxn.__name__}\n")

    #print(f"Processing completed. Output written to {sample_tab_path}")

    config_path = write_config_yaml(
        input_dir, output_dir, args.forward_primer, args.reverse_primer, args.amplen, args.db_choice, metainfo, extension, figaro_name
    )
    run_snakemake(config_path)

if __name__ == "__main__":
    main()
