#import snakemake
import pandas as pd
import json

# merge cutadapt con dada2
cutadapt = snakemake.input.cutadapt
dada2 = snakemake.input.dada2
df1 = pd.read_table(cutadapt)
df2 = pd.read_table(dada2)
df2["total_retained"] = df2["total_retained"].apply(lambda x: f"{x}%")
df = pd.merge(df1,df2,on="sample")
new_columns = pd.MultiIndex.from_tuples(
    [
        ("cutadapt", "reads retained"),
        ("cutadapt", "bps retained"),
        ("dada2", "reads.in"),
        ("dada2", "reads.out"),
        ("dada2", "dadaF"),
        ("dada2", "dadaR"),
        ("dada2", "merged"),
        ("dada2", "nonchim"),
        ("dada2", "total_retained"),
    ]
)
df_multi = df.set_index("sample")
df_multi.columns = new_columns

figaro_json = snakemake.input.figaro_json # f"{output_dir}/intermediate/figaro/trimParameters.json"
with open(figaro_json, "r") as fh:
    data = json.load(fh)
d = data[0]
trim_position = "forward:%s, reverse:%s" %tuple(d["trimPosition"])
max_expected_error = "forward:%s, reverse:%s" %tuple(d["maxExpectedError"])

assign_taxonomy_method = snakemake.params.taxonomy_method
method,database,version = {"decipher_silva138": ("decipher","Silva","138"),
							"dada2_silva_genus138": ("dada2","Silva","138"),
							"dada2_RDP_genus19": ("dada2","RDP","19"),
							"dada2_GG2_genus09": ("dada2","GreenGenes","09")}.get(assign_taxonomy_method)


start, end = snakemake.params.start, snakemake.params.end
reference, github = "","https://github.com/LDoni/AmpWrap" #TODO

report = f"""
# Report file 
Analysis started: {start}
Analysis ended: {end}
## Primers
Forward: {snakemake.params.forward_p} 
Reverse: {snakemake.params.reverse_p}
## Figaro parameters
trim_position: {trim_position}
max_expected_error: {max_expected_error}

## Denoising stats:
{df_multi.to_string(index=True)}

## Taxonomy annotation
Method: {method}
Database: {database}
Version: {version}

## Citation
generated by AmpWrap DE BESTA BLASTA FASTA GANGSTA
{reference}
{github}
"""
with open(snakemake.output.report, "w") as f:
    f.write(report)
