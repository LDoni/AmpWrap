#!/usr/bin/env python3
import pandas as pd
import json
from datetime import datetime

# Leggi i dati di input
df1 = pd.read_table(snakemake.input.cutadapt)
df2 = pd.read_table(snakemake.input.dada2)
df2["total_retained"] = df2["total_retained"].apply(lambda x: f"{x}%")

# Unisci i dataframe
df = pd.merge(df1, df2, on="sample")
new_columns = pd.MultiIndex.from_tuples([
    ("cutadapt", "reads retained"),
    ("cutadapt", "bps retained"),
    ("dada2", "reads.in"),
    ("dada2", "reads.out"),
    ("dada2", "dadaF"),
    ("dada2", "dadaR"),
    ("dada2", "merged"),
    ("dada2", "nonchim"),
    ("dada2", "total_retained"),
])
df_multi = df.set_index("sample")
df_multi.columns = new_columns

# Leggi i parametri di Figaro
with open(snakemake.input.figaro_json, "r") as fh:
    data = json.load(fh)
d = data[0]
trim_position = f"forward:{d['trimPosition'][0]}, reverse:{d['trimPosition'][1]}"
max_expected_error = f"forward:{d['maxExpectedError'][0]}, reverse:{d['maxExpectedError'][1]}"

# Informazioni sul metodo di tassonomia
tax_methods = {
    "decipher_silva138": ("decipher", "Silva", "138"),
    "dada2_silva_genus138": ("dada2", "Silva", "138"),
    "dada2_RDP_genus19": ("dada2", "RDP", "19"),
    "dada2_GG2_genus09": ("dada2", "GreenGenes", "09")
}
method, database, version = tax_methods.get(snakemake.params.taxonomy_method)

# Genera il report
report = f"""
# Report file 
Analysis started: {snakemake.params.start}
Analysis ended: {snakemake.params.end}

## Primers
Forward: {snakemake.params.forward_p} 
Reverse: {snakemake.params.reverse_p}

## Figaro parameters
trim_position: {trim_position}
max_expected_error: {max_expected_error}

## Denoising stats:
{df_multi.to_string(index=True)}

## Taxonomy annotation
Method: {method}
Database: {database}
Version: {version}

## Citation
generated by AmpWrap short
https://github.com/LDoni/AmpWrap
"""
with open(snakemake.output.report, "w") as f:
    f.write(report)
